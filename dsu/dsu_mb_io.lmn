/* union find (disjoint set) */
make(Y) :- int(Y) | { n=Y }.

merge(X, Y) :- X==Y |.
merge(X, Y) :- X\=Y | mg(check(X, Y)).

{ n=X1, $p[] }, { n=Y1, $q[] } \ mg(check(X2, Y2)) :- 
  X1==X2, Y1==Y2 | link(X1, Y1).
{ n=X1, n=Y1, $p[] } \ mg(check(X2, Y2)) :- 
  X1==X2, Y1==Y2 |.

link(X1, Y1), { n=X2, $p[] }, { n=Y2, $q[] } :- 
  X1==X2, Y1==Y2 | { n=X1, n=Y1, $p[], $q[] }.
/* end of union find */

%%% main
main.
main :- 
  n=integer.of_str(io.read_token(io.stdin,P0)),
  q=integer.of_str(io.read_token(P0,io.free_port)),
  sem_0.

n(X), sem_0 :- X == 0 | sem_1.
n(X) :- Y=X-1, Y >= 0 | n(Y), make(Y).

q(X), sem_1 :- X > 0, Y=X-1 |
  p=integer.of_str(io.read_token(io.stdin,P0)),
  a=integer.of_str(io.read_token(P0,P1)),
  b=integer.of_str(io.read_token(P1,io.free_port)),
  q(Y),
  sem_2.

% merge query
sem_2, p(P), a(A), b(B) :- P==0 |
  merge(A,B), sem_1.

% check query
sem_2, p(P), a(A), b(B) :- P==1 |
  ck(check(A,B)), sem_3.
sem_3, ck(check(X1,X2)) :-
  X1==X2 |
  io.print_line(io.stdout,"Yes",io.free_port), sem_1.
{ n=X1, n=Y1, $p[] } \ sem_3, ck(check(X2,Y2)) :- 
  X1==X2, Y1==Y2 | 
  io.print_line(io.stdout,"Yes",io.free_port), sem_1.
{ n=X1, $p[] }, { n=Y1, $q[] } \ sem_3, ck(check(X2,Y2)) :- 
  X1==X2, Y1==Y2 | 
  io.print_line(io.stdout,"No",io.free_port), sem_1.