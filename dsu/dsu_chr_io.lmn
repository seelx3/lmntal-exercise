
%%% dsu
sem_dsu.
merge@@
merge(A,B), sem_dsu :- find(A,X), find(B,Y), link(X,Y).

find1@@
parent(A1,B) \ find(A2,X) :- A1=A2, int(B) | find(B,X).
find2@@
root(A1)     \ find(A2,X) :- A1=A2 | X=A1.

link1@@
link(A1,A2) :- A1=A2 | sem_dsu.
link2@@
link(A1,B1), root(A2), root(B2) :- A1=A2, B1=B2 | 
  parent(B1,A1), root(A1), sem_dsu.
%%% dsu end

main.
main :- 
  n=integer.of_str(io.read_token(io.stdin,P0)),
  q=integer.of_str(io.read_token(P0,io.free_port)),
  sem_0.

n(X), sem_0 :- X == 0 | sem_1.
n(X) :- Y=X-1, Y >= 0 | n(Y), root(Y).

q(X), sem_1 :- X > 0, Y=X-1 |
  p=integer.of_str(io.read_token(io.stdin,P0)),
  a=integer.of_str(io.read_token(P0,P1)),
  b=integer.of_str(io.read_token(P1,io.free_port)),
  q(Y),
  sem_2.

% merge query
sem_2, p(P), a(A), b(B) :- P==0 |
  merge(A,B), sem_1.

% check query
sem_2, p(P), a(A), b(B) :- P==1 |
  find(A, X), find(B, Y), check(X, Y), sem_3.
sem_3, check(X, Y) :- X==Y | 
  io.print_line(io.stdout,"Yes",io.free_port), sem_1.
sem_3, check(X, Y) :- X\=Y |
  io.print_line(io.stdout,"No",io.free_port), sem_1.