/* union find (disjoint set) */
%%% init
make(X) :- new($x) | n(X,$x).

%%% merge
n(X1, !H1), n(Y1, !H2) \ merge(X2,Y2)
  :- X1=:=X2, Y1=:=Y2, !H1\=!H2 | H1><H2, t1.
n(X1, !H), n(Y1, !H) \ merge(X2,Y2)
  :- X1=:=X2, Y1=:=Y2 | t1.

%%% isSame
n(X1, !H1), n(Y1, !H2) \ check(X2,Y2)
  :- X1=:=X2, Y1=:=Y2, !H1\=!H2 | io.print_line(io.stdout,"No",io.free_port), t1.
n(X1, !H), n(Y1, !H) \ check(X2,Y2)
  :- X1=:=X2, Y1=:=Y2 | io.print_line(io.stdout,"Yes",io.free_port), t1.

/* end of union find */

%%% main
main.
main :- 
  n=integer.of_str(io.read_token(io.stdin,P0)),
  q=integer.of_str(io.read_token(P0,io.free_port)),
  t0.

n(X), t0 :- X == 0 | t1.
n(X) :- Y=X-1, Y >= 0 | n(Y), make(Y).

q(X), t1 :- X > 0, Y=X-1 |
  p=integer.of_str(io.read_token(io.stdin,P0)),
  a=integer.of_str(io.read_token(P0,P1)),
  b=integer.of_str(io.read_token(P1,io.free_port)),
  q(Y),
  t2.

% merge query
t2, p(P), a(A), b(B) :- P=:=0, A=\=B | merge(A,B).
t2, p(P), a(A), b(B) :- P=:=0, A=:=B | t1.

% check query
t2, p(P), a(A), b(B) :- P=:=1, A=\=B | check(A,B).
t2, p(P), a(A), b(B) :- P=:=1, A=:=B | 
  io.print_line(io.stdout,"Yes",io.free_port), t1.